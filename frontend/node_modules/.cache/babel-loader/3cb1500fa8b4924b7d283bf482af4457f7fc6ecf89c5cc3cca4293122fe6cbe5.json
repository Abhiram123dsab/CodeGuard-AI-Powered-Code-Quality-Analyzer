{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhir\\\\OneDrive\\\\Desktop\\\\CodeGuard-AI-Powered-Code-Quality-Analyzer\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport FileUpload from './components/FileUpload';\nimport ScoreDisplay from './components/ScoreDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [results, setResults] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handleFileUpload = async file => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Create a FormData object to send the file\n      const formData = new FormData();\n      formData.append('file', file);\n\n      // Send the file to the backend API\n      const response = await fetch('http://localhost:8000/analyze', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n      setResults(data);\n    } catch (err) {\n      setError(err.message || 'An error occurred during file analysis');\n      console.error('Error uploading file:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"CodeGuard - Code Quality Analyzer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Upload your code file to analyze its quality and get recommendations for improvement.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FileUpload, {\n      onUpload: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-indicator\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Analyzing your code...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), results && !loading && !error && /*#__PURE__*/_jsxDEV(ScoreDisplay, {\n      results: results\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ZmRUXqClUtrbxAfkxEtIp+EV8Tw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","FileUpload","ScoreDisplay","jsxDEV","_jsxDEV","App","_s","results","setResults","loading","setLoading","error","setError","handleFileUpload","file","formData","FormData","append","response","fetch","method","body","ok","Error","status","statusText","data","json","err","message","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onUpload","_c","$RefreshReg$"],"sources":["C:/Users/abhir/OneDrive/Desktop/CodeGuard-AI-Powered-Code-Quality-Analyzer/frontend/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport FileUpload from './components/FileUpload';\r\nimport ScoreDisplay from './components/ScoreDisplay';\r\n\r\nfunction App() {\r\n  const [results, setResults] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleFileUpload = async (file) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Create a FormData object to send the file\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      \r\n      // Send the file to the backend API\r\n      const response = await fetch('http://localhost:8000/analyze', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Error: ${response.status} ${response.statusText}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setResults(data);\r\n    } catch (err) {\r\n      setError(err.message || 'An error occurred during file analysis');\r\n      console.error('Error uploading file:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <h1>CodeGuard - Code Quality Analyzer</h1>\r\n      <p>Upload your code file to analyze its quality and get recommendations for improvement.</p>\r\n      \r\n      <FileUpload onUpload={handleFileUpload} />\r\n      \r\n      {loading && (\r\n        <div className=\"loading-indicator\">\r\n          <p>Analyzing your code...</p>\r\n        </div>\r\n      )}\r\n      \r\n      {error && (\r\n        <div className=\"error-message\">\r\n          <p>{error}</p>\r\n        </div>\r\n      )}\r\n      \r\n      {results && !loading && !error && (\r\n        <ScoreDisplay results={results} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}